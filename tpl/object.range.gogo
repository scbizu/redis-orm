{{define "object.range"}}
{{$rg := .}}
{{$obj := .Obj}}
{{$primary := $obj.PrimaryKey}}
{{$primaryField := $primary.FirstField }}

type {{$rg.Name}} struct{
	{{- range $j, $field := $rg.Fields}}
		{{- if ne (add $j 1) (len $rg.Fields)}}
		{{$field.Name}} {{$field.GetType}}
		{{- end}}
	{{- end}}
	{{$rg.LastField.Name}}Begin int64
	{{$rg.LastField.Name}}End int64
	offset int
	limit int
	includeBegin bool
	includeEnd bool
	revert bool
}
func (u *{{$rg.Name}}) Key() string {
	strs := []string{
		{{- range $j, $field := $rg.Fields}}
			{{- if ne (add $j 1) (len $rg.Fields)}}
				"{{$field.Name}}",
				{{- if $field.IsEncode}}
				orm.Encode(fmt.Sprint(u.{{$field.Name}})),
				{{- else}}
				fmt.Sprint(u.{{$field.Name}}),
				{{- end}}
			{{- end}}
		{{- end}}
		"{{$rg.LastField.Name}}",
	}
	return fmt.Sprintf("%s", strings.Join(strs, ":"))
}

func (u *{{$rg.Name}}) beginOp() string {
	if u.includeBegin {
		return ">="
	}
	return ">"
}
func (u *{{$rg.Name}}) endOp() string {
	if u.includeBegin {
		return "<="
	}
	return "<"
}

func (u *{{$rg.Name}}) SQLFormat(limit bool) string {
	conditions := []string{}
	{{- range $j, $field := $rg.Fields}}
		{{- if ne (add $j 1) (len $rg.Fields)}}
			conditions = append(conditions, "{{$field.FieldName}} = ?")
		{{- end}}
	{{- end}}
	if u.{{$rg.LastField.Name}}Begin != u.{{$rg.LastField.Name}}End {
		if u.{{$rg.LastField.Name}}Begin != -1 {
			conditions = append(conditions, fmt.Sprintf("{{$rg.LastField.FieldName}} %s ?", u.beginOp()))
		}
		if u.{{$rg.LastField.Name}}End != -1 {
			conditions = append(conditions, fmt.Sprintf("{{$rg.LastField.FieldName}} %s ?", u.endOp()))
		}
	}
	if limit {
		{{- if $obj.DbContains "mssql"}}
		return fmt.Sprintf("%s %s %s", orm.SQLWhere(conditions), orm.SQLOrderBy("{{$rg.LastField.FieldName}}", u.revert), orm.MsSQLOffsetLimit(u.offset, u.limit))
		{{- else}}
		return fmt.Sprintf("%s %s %s", orm.SQLWhere(conditions), orm.SQLOrderBy("{{$rg.LastField.FieldName}}", u.revert), orm.SQLOffsetLimit(u.offset, u.limit))
		{{- end}}
	}
	return fmt.Sprintf("%s %s", orm.SQLWhere(conditions), orm.SQLOrderBy("{{$rg.LastField.FieldName}}", u.revert))
}

func (u *{{$rg.Name}}) SQLParams() []interface{} {
	params := []interface{}{
		{{- range $j, $field := $rg.Fields}}
			{{- if ne (add $j 1) (len $rg.Fields)}}
				u.{{$field.Name}},
			{{- end}}
		{{- end}}
	}
	if u.{{$rg.LastField.Name}}Begin != u.{{$rg.LastField.Name}}End {
		if u.{{$rg.LastField.Name}}Begin != -1 {
			params = append(params, u.{{$rg.LastField.Name}}Begin)
		}
		if u.{{$rg.LastField.Name}}End != -1 {
			params = append(params, u.{{$rg.LastField.Name}}End)
		}
	}
	return params
}

func (u *{{$rg.Name}}) SQLLimit() int {
	if u.limit > 0 {
		return u.limit
	}
	return -1
}

func (u *{{$rg.Name}}) Limit(n int) {
	u.limit = n
}

func (u *{{$rg.Name}}) Offset(n int) {
	u.offset = n
}


func (u *{{$rg.Name}}) PositionOffsetLimit(len int) (int, int) {
	if u.limit <= 0 {
		return 0, len
	}
	if u.offset + u.limit > len {
		return u.offset, len
	}
	return u.offset, u.limit
}

func (u *{{$rg.Name}}) Begin() int64 {
	start := u.{{$rg.LastField.Name}}Begin
	if start == -1 || start == 0 {
		start = 0
	}
	if start > 0 {
		if !u.includeBegin {
			start = start + 1
		}
	}
	return start
}

func (u *{{$rg.Name}}) End() int64 {
	stop := u.{{$rg.LastField.Name}}End
	if stop == 0 || stop == -1 {
		stop = -1
	}
	if stop > 0 {
		if !u.includeBegin {
			stop = stop - 1
		}
	}
	return stop
}

func (u *{{$rg.Name}}) Revert(b bool) {
	u.revert = b
}

func (u *{{$rg.Name}}) IncludeBegin(f bool) {
	u.includeBegin = f
}

func (u *{{$rg.Name}}) IncludeEnd(f bool) {
	u.includeEnd = f
}

{{$relation := $rg.GetRelation "zset" $primaryField.GetType $obj.Name}}
func (u *{{$rg.Name}}) RNGRelation(store *orm.RedisStore) RangeRelation {
	{{- if $rg.Obj.DbContains "redis"}}
	return {{$relation.Name}}RedisMgr(store)
	{{- else}}
	return nil
	{{- end}}
}

{{end}}
